You are an expert full-stack developer.
Build me a rights and royalties management application from scratch that works as a minimum viable product (MVP) but is scalable.

Core Requirements

Authentication & Roles

Secure login system with JWT or session-based authentication.

Roles: Admin, Legal, Finance, Sales/User.

Contract / Deal Management

CRUD operations for contracts (create, read, update, delete).

Each contract stores:

Title/IP name

Parties involved (licensor/licensee)

Territories

Start/end dates (term)

Platforms/rights granted

Exclusivity flags

Upload / attach PDF contract documents.

Rights Availability Engine

Query contracts to check if a piece of IP is “available” for a given territory, date range, and platform.

Prevent conflicts (double licensing).

Royalty Calculation (Basic)

Input: revenue from a contract.

Compute royalties owed per contract terms (flat % of revenue).

Show summary per contract, per partner.

Export to CSV/Excel.

Dashboards & Reporting

Contract overview: active, expired, expiring soon.

Rights availability calendar.

Royalties owed by partner.

Audit Trail

Track changes to contract terms, who made them, and when.

Tech Stack

Backend: Python (Flask or FastAPI) or Node.js (Express).

Database: PostgreSQL,
Frontend: React with TailwindCSS (clean modern UI).

Auth: JWT-based auth with role permissions.

APIs: REST or GraphQL endpoints for all major actions.

Deployment: Docker + docker-compose.

Stretch Features (Phase 2, not MVP)

Advanced royalty rules: tiers, recoupables, advances.

Currency conversion, multi-language.

Workflow automation (approval flows, reminders).

Integrations (DocuSign for contracts, QuickBooks/NetSuite for finance).

Deliverables

A Git repo with clean code, modular structure, and clear README.

Environment variables (.env) for database URL, secret keys, etc.

Dockerfile + docker-compose.yml for easy deployment.

Seed data / migrations to bootstrap the database.

Example API calls or Postman collection.

Clean UI with minimal but functional dashboards.

Goal

The output should be:

A working web app where I can log in, add contracts, check availability, calculate royalties, and see dashboards.

Designed as MVP but extendable to enterprise scale.